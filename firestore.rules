// Helper function to check for admin role
function isAdmin() {
  return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
}

// Match any document in the database
match /{document=**} {
  // Admins have full read/write access everywhere
  allow read, write: if request.auth != null && isAdmin();
  
  // All other authenticated users have read-only access
  // This rule is evaluated only if the rule above is false.
  allow read: if request.auth != null;
}

// Specific rules for the 'users' collection
match /users/{userId} {
  // Any authenticated user can create their own user document
  allow create: if request.auth != null && request.auth.uid == userId
                  && ('role' in request.resource.data)
                  && (
                    // Allow 'admin' role only if no other users exist
                    (request.resource.data.role == 'admin' && !exists(/databases/$(database)/documents/users)) ||
                    // Otherwise, only allow 'viewer' role
                    (request.resource.data.role == 'viewer')
                  );

  // Users can read their own document
  allow read: if request.auth != null && request.auth.uid == userId;
  
  // Admins can update any user's document, but only the 'role' field
  // Users cannot update their own document after creation through this rule.
  allow update: if request.auth != null && isAdmin()
                  && request.resource.data.keys().hasOnly(['role']);
}