# =========================
#  Œ†œéœÇ ŒΩŒ± œÑœÅŒ≠ŒæŒµŒπœÇ Œ±œÖœÑœå œÑŒø script:
#
#   bash project-check.sh
#
# (ŒëŒΩ Œ≤Œ≥Œ¨ŒªŒµŒπ Permission Denied, œÄœÅœéœÑŒ± œÑœÅŒ≠ŒæŒµ:
#   chmod +x project-check.sh
# Œ∫Œ±Œπ ŒºŒµœÑŒ¨:
#   ./project-check.sh
# )
#
# Firebase Studio Terminal friendly!
# =========================

#!/usr/bin/env bash

set -e

# Cleanup function
cleanup() {
  echo "üßπ Cleaning up processes..." | tee -a project-check.log
  kill $DEV_PID $PREVIEW_PID $EMULATOR_PID $FIRESTORE_TEST_PID 2>/dev/null || true
}
trap cleanup EXIT

echo "ŒûŒµŒ∫ŒØŒΩŒ∑œÉŒµ: $(date)" | tee -a project-check.log

echo "üö¶ 1 Checking required environment variables..." | tee -a project-check.log
REQUIRED_VARS=() # ŒëœÜŒ±ŒπœÅŒ≠Œ∏Œ∑Œ∫Œµ Œø Œ≠ŒªŒµŒ≥œáŒøœÇ Œ≥ŒπŒ± NEXT_PUBLIC_API_URL
for var in "${REQUIRED_VARS[@]}"; do
  if [ -z "${!var}" ]; then
    echo "‚ùå Missing env variable: $var" | tee -a project-check.log
    exit 1
  fi
done
echo "‚úÖ Env variables look ok." | tee -a project-check.log

echo "üö¶ 2 Checking environment files consistency..." | tee -a project-check.log
ENV_FILES=("***REMOVED***.local" "***REMOVED***.development" "***REMOVED***.production")
for env_file in "${ENV_FILES[@]}"; do
  if [ -f "$env_file" ]; then
    echo "‚ÑπÔ∏è  Found $env_file - checking for required keys..." | tee -a project-check.log
    # ŒàŒªŒµŒ≥œáŒøœÇ Œ≥ŒπŒ± Œ∫ŒµŒΩŒ≠œÇ Œ≥œÅŒ±ŒºŒºŒ≠œÇ ŒÆ ŒªŒ¨Œ∏ŒøœÇ format
    if grep -q "^[^#]*=" "$env_file"; then
      echo "‚úÖ $env_file contains environment variables." | tee -a project-check.log
    fi
  fi
done

echo "üö¶ 3 Ensuring .prettierignore exists and is sane..." | tee -a project-check.log
if [ ! -f .prettierignore ]; then
  echo "node_modules\n.next\n.firebase\nout\ndist\ncoverage\npublic" > .prettierignore
  echo "‚úÖ .prettierignore created!" | tee -a project-check.log
else
  echo "‚úÖ .prettierignore already exists." | tee -a project-check.log
fi

echo "üö¶ 4 Checking for security vulnerabilities..." | tee -a project-check.log
if npm audit --audit-level high 2>/dev/null | grep -q "found.*vulnerabilities"; then
  echo "‚ö†Ô∏è  High severity vulnerabilities found! Run 'npm audit fix'" | tee -a project-check.log
else
  echo "‚úÖ No high severity vulnerabilities found." | tee -a project-check.log
fi

echo "üö¶ 5 Checking Firebase configuration..." | tee -a project-check.log
if [ ! -f firebase.json ]; then
  echo "‚ùå Missing firebase.json file!" | tee -a project-check.log
  exit 1
fi
if [ ! -f .firebaserc ]; then
  echo "‚ùå Missing .firebaserc file!" | tee -a project-check.log
  exit 1
fi
if ! command -v firebase >/dev/null 2>&1; then
  echo "‚ùå Firebase CLI is not installed!" | tee -a project-check.log
  exit 1
fi
FIREBASE_VERSION=$(firebase --version)
echo "‚úÖ Firebase CLI version: $FIREBASE_VERSION" | tee -a project-check.log
echo "‚úÖ Firebase configuration files found." | tee -a project-check.log

echo "üö¶ 6 Checking .gitignore and sensitive files..." | tee -a project-check.log
if [ ! -f .gitignore ]; then
  echo "‚ùå Missing .gitignore file!" | tee -a project-check.log
  exit 1
fi
if grep -q "***REMOVED***" .gitignore && git ls-files | grep -q "***REMOVED***"; then
  echo "‚ùå Sensitive ***REMOVED*** file found in git index!" | tee -a project-check.log
  exit 1
fi
echo "‚úÖ .gitignore and sensitive files check passed." | tee -a project-check.log

echo "üö¶ 7 Checking for uncommitted changes..." | tee -a project-check.log
if [ -n "$(git status --porcelain)" ]; then
  echo "‚ö†Ô∏è  Œ•œÄŒ¨œÅœáŒøœÖŒΩ uncommitted changes! ŒöŒ±Œªœå ŒµŒØŒΩŒ±Œπ ŒΩŒ± œÑŒ± commitŒ¨œÅŒµŒπœÇ œÄœÅŒπŒΩ œÉœÖŒΩŒµœáŒØœÉŒµŒπœÇ." | tee -a project-check.log
  echo "‚ÑπÔ∏è  ŒòŒ≠ŒªŒµŒπœÇ ŒΩŒ± Œ∫Œ¨ŒΩŒµŒπœÇ commit œÑœéœÅŒ±; (y/n)" | tee -a project-check.log
  read -p "‚Ü©Ô∏è " COMMIT_RESPONSE
  if [ "$COMMIT_RESPONSE" = "y" ]; then
    echo "‚ÑπÔ∏è  ŒïŒπœÉŒ¨Œ≥ŒµœÑŒµ ŒºŒÆŒΩœÖŒºŒ± Œ≥ŒπŒ± œÑŒø commit:" | tee -a project-check.log
    read -p "‚Ü©Ô∏è " COMMIT_MESSAGE
    if [ -z "$COMMIT_MESSAGE" ]; then
      COMMIT_MESSAGE="Auto-commit from project-check.sh"
    fi
    git add .
    git commit -m "$COMMIT_MESSAGE"
    echo "‚úÖ Changes committed." | tee -a project-check.log
  else
    echo "‚ÑπÔ∏è  Œ£œÖŒΩŒµœáŒØŒ∂ŒøœÖŒºŒµ œáœâœÅŒØœÇ commit." | tee -a project-check.log
  fi
else
  echo "‚úÖ No uncommitted changes found." | tee -a project-check.log
fi

echo "üö¶ 8 Checking for outdated dependencies..." | tee -a project-check.log
if npm outdated | grep -q 'Package'; then
  echo "‚ö†Ô∏è  Œ•œÄŒ¨œÅœáŒøœÖŒΩ outdated dependencies!" | tee -a project-check.log
  echo "‚ÑπÔ∏è  Œ§œÅŒ≠ŒæŒµ 'npm outdated' Œ≥ŒπŒ± ŒªŒµœÄœÑŒøŒºŒ≠œÅŒµŒπŒµœÇ Œ∫Œ±Œπ 'npm update' Œ≥ŒπŒ± ŒµŒΩŒ∑ŒºŒ≠œÅœâœÉŒ∑ (œÄœÅŒøœÉŒøœáŒÆ!)." | tee -a project-check.log
  echo "‚ÑπÔ∏è  ŒìŒπŒ± major versions: 'npm install package@latest' (ŒµŒªŒ≠Œ≥œáŒµŒπœÇ Œ≠ŒΩŒ± Œ≠ŒΩŒ±)." | tee -a project-check.log
  echo "‚ÑπÔ∏è  ŒòŒ≠ŒªŒµŒπœÇ ŒΩŒ± œÑœÅŒ≠ŒæŒµŒπœÇ 'npm update' œÑœéœÅŒ±; (y/n)" | tee -a project-check.log
  read -p "‚Ü©Ô∏è " UPDATE_RESPONSE
  if [ "$UPDATE_RESPONSE" = "y" ]; then
    if npm update; then
      echo "‚úÖ Dependencies updated." | tee -a project-check.log
    else
      echo "‚ùå Failed to update dependencies. ŒîŒπœåœÅŒ∏œâœÉŒµ œÑŒ± œÉœÜŒ¨ŒªŒºŒ±œÑŒ±!" | tee -a project-check.log
      exit 1
    fi
  else
    echo "‚ÑπÔ∏è  Œ£œÖŒΩŒµœáŒØŒ∂ŒøœÖŒºŒµ œáœâœÅŒØœÇ update." | tee -a project-check.log
  fi
else
  echo "‚úÖ No outdated dependencies found." | tee -a project-check.log
fi

echo "üö¶ 9 Linting code (npm run lint)..." | tee -a project-check.log
if ! npm run lint; then
  echo "‚ùå Linting failed. ŒîŒπœåœÅŒ∏œâœÉŒµ œÑŒ± lint errors œÄœÅŒπŒΩ œÉœÖŒΩŒµœáŒØœÉŒµŒπœÇ!" | tee -a project-check.log
  exit 1
fi
echo "‚úÖ Linting passed." | tee -a project-check.log

echo "üö¶ 10 Checking code formatting (prettier --check)..." | tee -a project-check.log
if [ -f package.json ] && grep -q "\"format\":" package.json; then
  if ! npm run format:check; then
    echo "‚ö†Ô∏è  Formatting issues found. Auto-fixing..." | tee -a project-check.log
    npm run format || npx prettier --write .
    echo "‚úÖ Formatting fixed automatically." | tee -a project-check.log
  else
    echo "‚úÖ Formatting OK." | tee -a project-check.log
  fi
elif npx prettier --check . 2>/dev/null; then
  echo "‚úÖ Formatting OK (prettier --check)." | tee -a project-check.log
else
  echo "‚ö†Ô∏è  Formatting issues found. Auto-fixing..." | tee -a project-check.log
  npx prettier --write .
  echo "‚úÖ Formatting fixed automatically." | tee -a project-check.log
fi

echo "üö¶ 11 Type checking (tsc --noEmit)..." | tee -a project-check.log
if ! npx tsc --noEmit; then
  echo "‚ùå TypeScript type check failed. ŒîŒπœåœÅŒ∏œâœÉŒµ œÑŒ± type errors œÄœÅŒπŒΩ œÉœÖŒΩŒµœáŒØœÉŒµŒπœÇ!" | tee -a project-check.log
  exit 1
fi
echo "‚úÖ TypeScript types are valid." | tee -a project-check.log

echo "üö¶ 12 Checking Firebase Emulator Suite..." | tee -a project-check.log
if firebase emulators:start --only firestore,functions --inspect-functions &>/tmp/emulator.log & then
  EMULATOR_PID=$!
  sleep 15

  # ŒàŒªŒµŒ≥œáŒøœÇ Œ±ŒΩ œÑŒø Firestore emulator ŒæŒµŒ∫ŒØŒΩŒ∑œÉŒµ
  if timeout 30 curl --silent --fail http://localhost:8080 >/dev/null; then
    echo "‚úÖ Firestore emulator responds!" | tee -a project-check.log
  else
    echo "‚ùå Firestore emulator failed to respond!" | tee -a project-check.log
    kill $EMULATOR_PID || true
    exit 1
  fi

  # ŒàŒªŒµŒ≥œáŒøœÇ Firestore UI
  if timeout 10 curl --silent --fail http://localhost:4000 >/dev/null; then
    echo "‚úÖ Firestore Emulator UI available at http://localhost:4000" | tee -a project-check.log
  else
    echo "‚ö†Ô∏è  Firestore Emulator UI not accessible (might be disabled)" | tee -a project-check.log
  fi

  kill $EMULATOR_PID || true
  sleep 3
else
  echo "‚ùå Failed to start Firebase emulators!" | tee -a project-check.log
  exit 1
fi

echo "üö¶ 13 Validating Firebase Security Rules..." | tee -a project-check.log
if [ -f firestore.rules ]; then
  if ! firebase emulators:exec --only firestore 'echo "Firestore emulator is running"'; then
    echo "‚ùå Firestore rules validation failed!" | tee -a project-check.log
    exit 1
  fi
  echo "‚úÖ Firestore security rules are valid." | tee -a project-check.log
else
  echo "‚ÑπÔ∏è  No firestore.rules file found, skipping validation." | tee -a project-check.log
fi

echo "üö¶ 14 Checking Firestore indexes..." | tee -a project-check.log
if [ -f firestore.indexes.json ]; then
  echo "‚ÑπÔ∏è  Found firestore.indexes.json - make sure indexes are deployed in production." | tee -a project-check.log
  echo "‚úÖ Firestore indexes file found." | tee -a project-check.log
else
  echo "‚ÑπÔ∏è  No firestore.indexes.json found." | tee -a project-check.log
fi

echo "üö¶ 15 Checking Firebase Functions..." | tee -a project-check.log
if [ -d "functions" ]; then
  cd functions
  if ! npm run build 2>/dev/null; then
    echo "‚ùå Functions build failed!" | tee -a project-check.log
    cd ..
    exit 1
  fi
  cd ..
  echo "‚úÖ Firebase Functions build OK." | tee -a project-check.log
else
  echo "‚ÑπÔ∏è  No functions directory found, skipping." | tee -a project-check.log
fi

echo "üö¶ 16 Testing Firestore connection..." | tee -a project-check.log
# Start emulator for testing
firebase emulators:start --only firestore --project demo-test &>/tmp/firestore-test.log &
FIRESTORE_TEST_PID=$!

# Wait for emulator to be ready with a reliable retry loop
echo "‚è≥ Waiting for Firestore emulator to start..." | tee -a project-check.log
timeout=30
while ! curl --silent --fail http://127.0.0.1:8080 >/dev/null && [ $timeout -gt 0 ]; do
  sleep 1
  timeout=$((timeout - 1))
done

if [ $timeout -eq 0 ]; then
  echo "‚ùå Could not start Firestore emulator for testing!" | tee -a project-check.log
  kill $FIRESTORE_TEST_PID || true
  exit 1
fi

echo "‚úÖ Firestore emulator started for connection testing." | tee -a project-check.log

# Test basic Firestore operations with Firebase Admin SDK (if exists)
if [ -f "firebase-admin-test.js" ]; then
  echo "‚ÑπÔ∏è  Running Firestore connection test..." | tee -a project-check.log
  node firebase-admin-test.js && echo "‚úÖ Firestore operations test passed." | tee -a project-check.log
else
  echo "‚ÑπÔ∏è  No Firestore connection test file found. Consider adding firebase-admin-test.js" | tee -a project-check.log
fi

# Check for Firebase config in the app
if grep -r "initializeApp\|getFirestore" src/ >/dev/null 2>&1; then
  echo "‚úÖ Firebase/Firestore initialization found in source code." | tee -a project-check.log
else
  echo "‚ö†Ô∏è  No Firebase/Firestore initialization found in src/. Make sure Firebase is properly configured." | tee -a project-check.log
fi

# Check for Firebase environment variables
ENV_VARS_FOUND=0
for env_file in ***REMOVED*** ***REMOVED***.local ***REMOVED***.development ***REMOVED***.production; do
  if [ -f "$env_file" ]; then
    if grep -q "FIREBASE\|NEXT_PUBLIC_FIREBASE" "$env_file"; then
      echo "‚úÖ Firebase config found in $env_file" | tee -a project-check.log
      ENV_VARS_FOUND=1
    fi
  fi
done

if [ $ENV_VARS_FOUND -eq 0 ]; then
  echo "‚ö†Ô∏è  No Firebase environment variables found. Make sure Firebase config is set." | tee -a project-check.log
fi

kill $FIRESTORE_TEST_PID || true
sleep 3
echo "‚úÖ Firestore connection tests completed." | tee -a project-check.log

echo "üö¶ 17 Running development server (npm run dev)..." | tee -a project-check.log
npm run dev &
DEV_PID=$!
sleep 10

echo "üîç Checking if dev server responds at http://localhost:9003..." | tee -a project-check.log
if timeout 30 curl --silent --fail http://localhost:9003 >/dev/null; then
  echo "‚úÖ Dev server responds!" | tee -a project-check.log
else
  echo "‚ùå Dev server ŒîŒïŒù Œ±œÄŒ±ŒΩœÑŒ¨ŒµŒπ! ŒöŒ¨œÑŒπ œÑœÅŒ≠œáŒµŒπ..." | tee -a project-check.log
  kill $DEV_PID || true
  exit 1
fi

echo "üö¶ 3.1 Running E2E tests (npm run e2e)..." | tee -a project-check.log
if [ -f package.json ] && grep -q "\"e2e\":" package.json; then
  if ! npm run e2e; then
    echo "‚ùå E2E tests failed. ŒîŒπœåœÅŒ∏œâœÉŒµ œÑŒ± œÉœÜŒ¨ŒªŒºŒ±œÑŒ±!" | tee -a project-check.log
    kill $DEV_PID || true
    exit 1
  fi
  echo "‚úÖ E2E tests passed." | tee -a project-check.log
else
  echo "‚ÑπÔ∏è  ŒîŒµŒΩ Œ≤œÅŒ≠Œ∏Œ∑Œ∫Œ±ŒΩ E2E tests, œÄœÅŒøœáœâœÅŒ¨ŒºŒµ." | tee -a project-check.log
fi

echo "üö¶ 18 Testing critical API endpoints..." | tee -a project-check.log
CRITICAL_ENDPOINTS=("/api/health" "/api/auth/status")
for endpoint in "${CRITICAL_ENDPOINTS[@]}"; do
  if timeout 10 curl --silent --fail "http://localhost:9003$endpoint" >/dev/null; then
    echo "‚úÖ $endpoint responds" | tee -a project-check.log
  else
    echo "‚ÑπÔ∏è  $endpoint not responding (might be expected)" | tee -a project-check.log
  fi
done

echo "üö¶ 19 Manual testing required..." | tee -a project-check.log
echo "‚ÑπÔ∏è  ŒïŒªŒµŒ≥ŒæŒµ MANUAL œÉœÑŒøŒΩ browser œÉŒøœÖ Œ±ŒΩ œÜŒøœÅœÑœéŒΩŒµŒπ œÉœâœÉœÑŒ¨ œÉœÑŒø http://localhost:9003" | tee -a project-check.log
echo "‚ÑπÔ∏è  ŒÜŒΩŒøŒπŒæŒµ œÑŒ± Developer Tools Œ∫Œ±Œπ Œ¥ŒµœÇ Œ±ŒΩ œÖœÄŒ¨œÅœáŒøœÖŒΩ errors œÉœÑŒø console" | tee -a project-check.log
echo "‚ÑπÔ∏è  ŒöœåŒ∫Œ∫ŒπŒΩŒ± errors = œÄœÅœåŒ≤ŒªŒ∑ŒºŒ±, Œ∫ŒØœÑœÅŒπŒΩŒ± warnings = œÄœÅŒøœÉŒøœáŒÆ" | tee -a project-check.log
echo "‚ÑπÔ∏è  Œ†Œ¨œÑŒ∑œÉŒµ Enter œåœÑŒ±ŒΩ œÑŒµŒªŒµŒπœéœÉŒµŒπœÇ œÑŒø manual test (ŒÆ Ctrl+C Œ≥ŒπŒ± ŒΩŒ± œÑŒø Œ¥ŒπŒ±Œ∫œåœàŒµŒπœÇ Œ±ŒΩ Œ∫Œ¨œÑŒπ œÄŒ¨ŒµŒπ œÉœÑœÅŒ±Œ≤Œ¨)" | tee -a project-check.log
read -p "‚Ü©Ô∏è "

kill $DEV_PID || true
sleep 2

echo "üö¶ 20 Building production build (npm run build)..." | tee -a project-check.log
if ! npm run build; then
  echo "‚ùå Production build failed. ŒîŒπœåœÅŒ∏œâœÉŒµ œÑŒ± build errors!" | tee -a project-check.log
  exit 1
fi
echo "‚úÖ Build passed." | tee -a project-check.log

echo "üö¶ 21 Checking production build size..." | tee -a project-check.log
MAX_SIZE=$((2 * 1024 * 1024)) # 2MB in bytes
BUILD_SIZE=$(find dist -type f -exec du -b {} + 2>/dev/null | awk '{sum += $1} END {print sum}' || echo "0")
if [ "$BUILD_SIZE" -gt "$MAX_SIZE" ]; then
  echo "‚ö†Ô∏è  Build size ($BUILD_SIZE bytes) exceeds recommended limit ($MAX_SIZE bytes)!" | tee -a project-check.log
else
  echo "‚úÖ Build size is within limits ($BUILD_SIZE bytes)." | tee -a project-check.log
fi

echo "üö¶ 22 Analyzing bundle for potential issues..." | tee -a project-check.log
if command -v npx >/dev/null 2>&1 && [ -d "dist/static/js" ]; then
  echo "‚ÑπÔ∏è  Bundle analysis available - consider running bundle analyzer manually if needed." | tee -a project-check.log
else
  echo "‚ÑπÔ∏è  Bundle analysis skipped." | tee -a project-check.log
fi

echo "üö¶ 23 Starting production preview (npm start)..." | tee -a project-check.log
npm start &
PREVIEW_PID=$!
sleep 10

echo "üîç Checking if production server responds at http://localhost:9003..." | tee -a project-check.log
if timeout 30 curl --silent --fail http://localhost:9003 >/dev/null; then
  echo "‚úÖ Production server responds!" | tee -a project-check.log

  # ŒàŒªŒµŒ≥œáŒøœÇ Œ≥ŒπŒ± Firestore errors œÉœÑŒø production build
  echo "üö¶ 24 Checking Firestore connection in production mode..." | tee -a project-check.log
  sleep 5

  # Test Œ±ŒΩ œÖœÄŒ¨œÅœáŒøœÖŒΩ console errors œÉœáŒµœÑŒπŒ∫Œ¨ ŒºŒµ Firebase/Firestore
  echo "‚ÑπÔ∏è  ŒïŒªŒ≠Œ≥œáŒøœÖŒºŒµ Œ≥ŒπŒ± Firebase/Firestore errors œÉœÑŒø production build..." | tee -a project-check.log
  echo "‚ÑπÔ∏è  ŒÜŒΩŒøŒπŒæŒµ œÑŒø http://localhost:9003 Œ∫Œ±Œπ Œ¥ŒµœÇ œÑŒø console Œ≥ŒπŒ± Firebase errors." | tee -a project-check.log

else
  echo "‚ùå Production server ŒîŒïŒù Œ±œÄŒ±ŒΩœÑŒ¨ŒµŒπ! ŒöŒ¨œÑŒπ œÑœÅŒ≠œáŒµŒπ..." | tee -a project-check.log
  kill $PREVIEW_PID || true
  exit 1
fi

echo "‚ÑπÔ∏è  ŒïŒªŒµŒ≥ŒæŒµ MANUAL œÉœÑŒøŒΩ browser œÉŒøœÖ Œ±ŒΩ œÜŒøœÅœÑœéŒΩŒµŒπ œÉœâœÉœÑŒ¨ œÉœÑŒø http://localhost:9003 (production mode)" | tee -a project-check.log
echo "‚ÑπÔ∏è  Œ†Œ¨œÑŒ∑œÉŒµ Enter œåœÑŒ±ŒΩ œÑŒµŒªŒµŒπœéœÉŒµŒπœÇ œÑŒø manual test (ŒÆ Ctrl+C Œ≥ŒπŒ± ŒΩŒ± œÑŒø Œ¥ŒπŒ±Œ∫œåœàŒµŒπœÇ Œ±ŒΩ Œ∫Œ¨œÑŒπ œÄŒ¨ŒµŒπ œÉœÑœÅŒ±Œ≤Œ¨)" | tee -a project-check.log
read -p "‚Ü©Ô∏è "

kill $PREVIEW_PID || true
sleep 2

echo "üö¶ 25 Running Firebase deploy dry-run..." | tee -a project-check.log
if ! firebase deploy --dry-run; then
  echo "‚ùå Firebase deploy dry-run failed. ŒîŒπœåœÅŒ∏œâœÉŒµ œÑŒ± œÉœÜŒ¨ŒªŒºŒ±œÑŒ±!" | tee -a project-check.log
  exit 1
fi
echo "‚úÖ Firebase deploy dry-run passed." | tee -a project-check.log

if [ -f package.json ] && grep -q "\"test\":" package.json; then
  echo "üö¶ 26 Running tests (npm test)..." | tee -a project-check.log
  if ! npm test; then
    echo "‚ùå Tests failed. ŒöŒ¨œÑŒπ Œ¥ŒµŒΩ œÄŒ¨ŒµŒπ Œ∫Œ±ŒªŒ¨!" | tee -a project-check.log
    exit 1
  fi
  echo "‚úÖ Tests passed." | tee -a project-check.log
else
  echo "‚ÑπÔ∏è  ŒîŒµŒΩ Œ≤œÅŒ≠Œ∏Œ∑Œ∫Œ±ŒΩ tests, œÄœÅŒøœáœâœÅŒ¨ŒºŒµ." | tee -a project-check.log
fi

echo "üéâ ŒüŒõŒë ŒöŒëŒõŒë! Œ§œéœÅŒ± ŒºœÄŒøœÅŒµŒØœÇ ŒΩŒ± Œ∫Œ¨ŒΩŒµŒπœÇ deploy ŒºŒµ Œ±œÉœÜŒ¨ŒªŒµŒπŒ±!" | tee -a project-check.log
echo "Œ§ŒµŒªŒµŒØœâœÉŒµ: $(date)" | tee -a project-check.log

## --- Œ§ŒïŒõŒôŒöŒü BLOCK ŒëŒ•Œ§ŒüŒúŒëŒ§ŒüŒ†ŒüŒôŒóŒ£ŒóŒ£ ---

echo "üö¶ 27 [AUTO] Œ§ŒµŒªŒπŒ∫œå production build (npm run build)..." | tee -a project-check.log
if ! npm run build; then
  echo "‚ùå Production build failed. ŒîŒπœåœÅŒ∏œâœÉŒµ œÑŒ± build errors Œ∫Œ±Œπ ŒæŒ±ŒΩŒ±œÑœÅŒ≠ŒæŒµ œÑŒø script!" | tee -a project-check.log
  exit 1
fi
echo "‚úÖ Build ŒüŒö." | tee -a project-check.log

echo "üö¶ 28 [AUTO] Œ†œÅŒøŒµœÄŒπœÉŒ∫œåœÄŒ∑œÉŒ∑ (npm start)..." | tee -a project-check.log
npm start &
FINAL_PREVIEW_PID=$!
sleep 10

echo "üîç ŒàŒªŒµŒ≥œáŒøœÇ Œ±ŒΩ œÑŒø production server Œ±ŒΩœÑŒ±œÄŒøŒ∫œÅŒØŒΩŒµœÑŒ±Œπ (http://localhost:9003)..." | tee -a project-check.log
if timeout 30 curl --silent --fail http://localhost:9003 >/dev/null; then
  echo "‚úÖ Production preview ŒüŒö!" | tee -a project-check.log
else
  echo "‚ùå Production server ŒîŒïŒù Œ±ŒΩœÑŒ±œÄŒøŒ∫œÅŒØŒΩŒµœÑŒ±Œπ! ŒöŒ¨œÑŒπ œÄŒÆŒ≥Œµ ŒªŒ¨Œ∏ŒøœÇ." | tee -a project-check.log
  kill $FINAL_PREVIEW_PID || true
  exit 1
fi

kill $FINAL_PREVIEW_PID || true
sleep 2

echo "üö¶ 29 [AUTO] Œ§ŒµŒªŒπŒ∫œå deploy œÉœÑŒø Firebase..." | tee -a project-check.log
if ! firebase deploy; then
  echo "‚ùå Deploy failed! ŒîŒπœåœÅŒ∏œâœÉŒµ Œ∫Œ±Œπ ŒæŒ±ŒΩŒ±œÄœÅŒøœÉœÄŒ¨Œ∏Œ∑œÉŒµ." | tee -a project-check.log
  exit 1
fi
echo "‚úÖ Deploy ŒüŒö." | tee -a project-check.log

echo "üö¶ 30 [MANUAL STEP] Œ†ŒÆŒ≥Œ±ŒπŒΩŒµ œÑœéœÅŒ± œÉœÑŒø Firebase Studio Œ∫Œ±Œπ œÄŒ¨œÑŒ± œÑŒø ŒúŒ†ŒõŒï Œ∫ŒøœÖŒºœÄŒØ **PUBLISH** Œ≥ŒπŒ± ŒΩŒ± Œ≤Œ≥ŒøœÖŒΩ live ŒøŒπ Œ±ŒªŒªŒ±Œ≥Œ≠œÇ œÉŒøœÖ!" | tee -a project-check.log
echo "üëâ https://console.firebase.google.com/project/Œ§Œü_ŒüŒùŒüŒúŒë_Œ§ŒüŒ•_PROJECT_SOU/studio (Œ±ŒΩœÑŒπŒ∫Œ±œÑŒ≠œÉœÑŒ∑œÉŒµ œÑŒø ŒºŒµ œÑŒø Œ¥ŒπŒ∫œå œÉŒøœÖ link Œ±ŒΩ Œ∏ŒµœÇ)" | tee -a project-check.log

echo "" | tee -a project-check.log
echo "üèÅ ŒüŒõŒüŒöŒõŒóŒ°Œ©ŒòŒóŒöŒï Œó ŒîŒôŒëŒîŒôŒöŒëŒ£ŒôŒë!" | tee -a project-check.log
echo "" | tee -a project-check.log
echo "üö¶ ŒòŒ≠ŒªŒµŒπœÇ ŒΩŒ± Œ∫Œ¨ŒΩŒµŒπœÇ commit & push œÉœÑŒø GitHub; [y/N]" | tee -a project-check.log
read -r COMMIT_GIT
if [[ "$COMMIT_GIT" =~ ^([yY][eE][sS]|[yY])$ ]]
then
  echo "ŒìœÅŒ¨œàŒµ œÑŒø commit message œÉŒøœÖ (ŒÆ œÄŒ¨œÑŒ± Enter Œ≥ŒπŒ± default):" | tee -a project-check.log
  read -r COMMIT_MSG
  if [ -z "$COMMIT_MSG" ]; then
    COMMIT_MSG="autocommit by project-check.sh $(date '+%Y-%m-%d %H:%M')"
  fi
  git add .
  git commit -m "$COMMIT_MSG"
  git push
  echo "‚úÖ ŒöœéŒ¥ŒπŒ∫Œ±œÇ œÉœÑŒ¨ŒªŒ∏Œ∑Œ∫Œµ œÉœÑŒø GitHub!" | tee -a project-check.log
else
  echo "‚ÑπÔ∏è  Œ†Œ±œÅŒ≠ŒªŒµŒπœàŒµœÇ œÑŒø GitHub commit/push. ŒåœÄŒøœÑŒµ Œ∏ŒµœÇ, œÑŒø Œ∫Œ¨ŒΩŒµŒπœÇ œáŒµŒπœÅŒøŒ∫ŒØŒΩŒ∑œÑŒ±." | tee -a project-check.log
fi
echo "üéØ ŒúœåŒªŒπœÇ œÄŒ±œÑŒÆœÉŒµŒπœÇ Œ∫Œ±Œπ œÑŒø PUBLISH, ŒµŒØœÉŒ±Œπ œÉœÑŒøŒΩ Œ±Œ≠œÅŒ±!" | tee -a project-check.log
echo "Œ§ŒµŒªŒµŒØœâœÉŒµ: $(date)" | tee -a project-check.log